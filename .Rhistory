head(15) %>%
flextable() %>%
flextable::set_table_properties(width = .75, layout = "autofit") %>%
flextable::theme_zebra() %>%
flextable::fontsize(size = 12) %>%
flextable::fontsize(size = 12, part = "header") %>%
flextable::align_text_col(align = "center") %>%
flextable::set_caption(caption = "First 15 rows of slrdata.")  %>%
flextable::border_outer()
p1 <- ggplot(slrdata, aes(Date, Prepositions)) +
geom_point() +
theme_bw() +
labs(x = "Year") +
labs(y = "Prepositions per 1,000 words") +
geom_smooth()
p2 <- ggplot(slrdata, aes(Date, Prepositions)) +
geom_point() +
theme_bw() +
labs(x = "Year") +
labs(y = "Prepositions per 1,000 words") +
geom_smooth(method = "lm") # with linear model smoothing!
# display plots
ggpubr::ggarrange(p1, p2, ncol = 2, nrow = 1)
# center date
slrdata$Date <- slrdata$Date - mean(slrdata$Date)
# create initial model
m1.lm <- lm(Prepositions ~ Date, data = slrdata)
# inspect results
summary(m1.lm)
# use pt function (which uses t-values and the degrees of freedom)
2*pt(-2.383, nrow(slrdata)-1)
# create intercept-only base-line model
m0.lm <- lm(Prepositions ~ 1, data = slrdata)
# compare the base-line and the more saturated model
anova(m1.lm, m0.lm, test = "F")
# DF = N - number of predictors (including intercept)
DegreesOfFreedom <- nrow(slrdata)-length(coef(m1.lm))
# sum of the squared residuals
SumSquaredResiduals <- sum(resid(m1.lm)^2)
# Residual Standard Error
sqrt(SumSquaredResiduals/DegreesOfFreedom); DegreesOfFreedom
# generate data
df2 <- data.frame(id = 1:length(resid(m1.lm)),
residuals = resid(m1.lm),
standard = rstandard(m1.lm),
studend = rstudent(m1.lm))
# generate plots
p1 <- ggplot(df2, aes(x = id, y = residuals)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_point() +
labs(y = "Residuals", x = "Index")
p2 <- ggplot(df2, aes(x = id, y = standard)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_point() +
labs(y = "Standardized Residuals", x = "Index")
p3 <- ggplot(df2, aes(x = id, y = studend)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
geom_point() +
labs(y = "Studentized Residuals", x = "Index")
# display plots
ggpubr::ggarrange(p1, p2, p3, ncol = 3, nrow = 1)
# generate plots
autoplot(m1.lm) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# create summary table
slrsummary(m1.lm)
# generate table
slrsummary(m1.lm) %>%
as.data.frame() %>%
add_rownames(var = "Parameters") %>%
#  head(15) %>%
flextable() %>%
flextable::set_table_properties(width = .75, layout = "autofit") %>%
flextable::theme_zebra() %>%
flextable::fontsize(size = 12) %>%
flextable::fontsize(size = 12, part = "header") %>%
flextable::align_text_col(align = "center") %>%
flextable::set_caption(caption = "Results of a simple linear regression analysis.")  %>%
flextable::border_outer()
# generate summary table
sjPlot::tab_model(m1.lm)
report::report(m1.lm)
# load data
slrdata2  <- base::readRDS(url("https://slcladal.github.io/data/sgd.rda", "rb"))
# inspect data
slrdata2 %>%
as.data.frame() %>%
head(15) %>%
flextable() %>%
flextable::set_table_properties(width = .75, layout = "autofit") %>%
flextable::theme_zebra() %>%
flextable::fontsize(size = 12) %>%
flextable::fontsize(size = 12, part = "header") %>%
flextable::align_text_col(align = "center") %>%
flextable::set_caption(caption = "First 15 rows of the slrdata2 data.")  %>%
flextable::border_outer()
# extract means
slrdata2 %>%
dplyr::group_by(Group) %>%
dplyr::mutate(Mean = round(mean(Score), 1), SD = round(sd(Score), 1)) %>%
ggplot(aes(Group, Score)) +
geom_boxplot(fill=c("orange", "darkgray")) +
geom_text(aes(label = paste("M = ", Mean, sep = ""), y = 1)) +
geom_text(aes(label = paste("SD = ", SD, sep = ""), y = 0)) +
theme_bw(base_size = 15) +
labs(x = "Group") +
labs(y = "Test score (Points)", cex = 0.75) +
coord_cartesian(ylim = c(0, 20)) +
guides(fill = FALSE)
# generate regression model
m2.lm <- lm(Score ~ Group, data = slrdata2)
# inspect results
summary(m2.lm)
par(mfrow = c(1, 3))        # plot window: 1 plot/row, 3 plots/column
plot(resid(m2.lm))     # generate diagnostic plot
plot(rstandard(m2.lm)) # generate diagnostic plot
plot(rstudent(m2.lm)); par(mfrow = c(1, 1))  # restore normal plot window
par(mfrow = c(2, 2)) # generate a plot window with 2x2 panels
plot(m2.lm); par(mfrow = c(1, 1)) # restore normal plot window
# tabulate results
slrsummary(m2.lm)
# inspect data
slrsummary(m2.lm)%>%
as.data.frame() %>%
add_rownames(var = "Parameters") %>%
#  head(15) %>%
flextable() %>%
flextable::set_table_properties(width = .75, layout = "autofit") %>%
flextable::theme_zebra() %>%
flextable::fontsize(size = 12) %>%
flextable::fontsize(size = 12, part = "header") %>%
flextable::align_text_col(align = "center") %>%
flextable::set_caption(caption = "Results of the regression analysis.")  %>%
flextable::border_outer()
report::report(m2.lm)
# load data
mlrdata  <- base::readRDS(url("https://slcladal.github.io/data/mld.rda", "rb"))
# inspect data
mlrdata %>%
as.data.frame() %>%
head(15) %>%
flextable() %>%
flextable::set_table_properties(width = .75, layout = "autofit") %>%
flextable::theme_zebra() %>%
flextable::fontsize(size = 12) %>%
flextable::fontsize(size = 12, part = "header") %>%
flextable::align_text_col(align = "center") %>%
flextable::set_caption(caption = "First 15 rows of the mlrdata.")  %>%
flextable::border_outer()
# create plots
p1 <- ggplot(mlrdata, aes(status, money)) +
geom_boxplot() +
theme_bw()
# plot 2
p2 <- ggplot(mlrdata, aes(attraction, money)) +
geom_boxplot() +
theme_bw()
# plot 3
p3 <- ggplot(mlrdata, aes(x = money)) +
geom_histogram(aes(y=..density..)) +
theme_bw() +
geom_density(alpha=.2, fill = "gray50")
# plot 4
p4 <- ggplot(mlrdata, aes(status, money)) +
geom_boxplot(aes(fill = factor(status))) +
scale_fill_manual(values = c("grey30", "grey70")) +
facet_wrap(~ attraction) +
guides(fill = "none") +
theme_bw()
# show plots
vip::grid.arrange(grobs = list(p1, p2, p3, p4), widths = c(1, 1), layout_matrix = rbind(c(1, 2), c(3, 4)))
m1.mlr = lm(                      # generate lm regression object
money ~ 1 + attraction*status,  # def. regression formula (1 = intercept)
data = mlrdata)                 # def. data
m1.glm = glm(                     # generate glm regression object
money ~ 1 + attraction*status,  # def. regression formula (1 = intercept)
family = gaussian,              # def. linkage function
data = mlrdata)
summary(m1.mlr)
summary(m1.glm)
# def. data
# automated AIC based model fitting
step(m1.mlr, direction = "both")
m2.mlr = lm(                       # generate lm regression object
money ~ (status + attraction)^2, # def. regression formula
data = mlrdata)                  # def. data
m2.glm = glm(                      # generate glm regression object
money ~ (status + attraction)^2, # def. regression formula
family = gaussian,               # def. linkage function
data = mlrdata)                  # def. data
# inspect final minimal model
summary(m2.mlr)
summary(m2.glm)
#intercept  Single  NotInterested  Single:NotInterested
99.15     + 57.69  + 0           + 0     # 156.8 single + interested
99.15     + 57.69  - 47.66       - 63.18 # 46.00 single + not interested
99.15     - 0      + 0           - 0     # 99.15 relationship + interested
99.15     - 0      - 47.66       - 0     # 51.49 relationship + not interested
# make prediction based on the model for original data
prediction <- predict(m2.mlr, newdata = mlrdata)
# inspect predictions
table(round(prediction,2))
# extract confidence intervals of the coefficients
confint(m2.mlr)
# create and compare baseline- and minimal adequate model
m0.mlr <- lm(money ~1, data = mlrdata)
anova(m0.mlr, m2.mlr)
# compare baseline- and minimal adequate model
Anova(m0.mlr, m2.mlr, type = "III")
# generate plots
autoplot(m2.mlr) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_bw()
# determine a cutoff for data points that have D-values higher than 4/(n-k-1)
cutoff <- 4/((nrow(mlrdata)-length(m2.mlr$coefficients)-2))
# start plotting
par(mfrow = c(1, 2))           # display plots in 3 rows/2 columns
qqPlot(m2.mlr, main="QQ Plot") # create qq-plot
plot(m2.mlr, which=4, cook.levels = cutoff); par(mfrow = c(1, 1))
# extract influence statistics
infl <- influence.measures(m2.mlr)
# add infl. statistics to data
mlrdata <- data.frame(mlrdata, infl[[1]], infl[[2]])
# annotate too influential data points
remove <- apply(infl$is.inf, 1, function(x) {
ifelse(x == TRUE, return("remove"), return("keep")) } )
# add annotation to data
mlrdata <- data.frame(mlrdata, remove)
# number of rows before removing outliers
nrow(mlrdata)
# remove outliers
mlrdata <- mlrdata[mlrdata$remove == "keep", ]
# number of rows after removing outliers
nrow(mlrdata)
# recreate regression models on new data
m0.mlr = lm(money ~ 1, data = mlrdata)
m0.glm = glm(money ~ 1, family = gaussian, data = mlrdata)
m1.mlr = lm(money ~ (status + attraction)^2, data = mlrdata)
m1.glm = glm(money ~ status * attraction, family = gaussian,
data = mlrdata)
# automated AIC based model fitting
step(m1.mlr, direction = "both")
# create new final models
m2.mlr = lm(money ~ (status + attraction)^2, data = mlrdata)
m2.glm = glm(money ~ status * attraction, family = gaussian,
data = mlrdata)
# inspect final minimal model
summary(m2.mlr)
# extract confidence intervals of the coefficients
confint(m2.mlr)
# compare baseline with final model
anova(m0.mlr, m2.mlr)
# compare baseline with final model
Anova(m0.mlr, m2.mlr, type = "III")
# generate plots
autoplot(m2.mlr) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme_bw()
# determine a cutoff for data points that have
# D-values higher than 4/(n-k-1)
cutoff <- 4/((nrow(mlrdata)-length(m2.mlr$coefficients)-2))
# start plotting
par(mfrow = c(1, 2))           # display plots in 1 row/2 columns
qqPlot(m2.mlr, main="QQ Plot") # create qq-plot
plot(m2.mlr, which=4, cook.levels = cutoff); par(mfrow = c(1, 1))
# add model diagnostics to the data
mlrdata <- mlrdata %>%
dplyr::mutate(residuals = resid(m2.mlr),
standardized.residuals = rstandard(m2.mlr),
studentized.residuals = rstudent(m2.mlr),
cooks.distance = cooks.distance(m2.mlr),
dffit = dffits(m2.mlr),
leverage = hatvalues(m2.mlr),
covariance.ratios = covratio(m2.mlr),
fitted = m2.mlr$fitted.values)
# plot 5
p5 <- ggplot(mlrdata,
aes(studentized.residuals)) +
theme(legend.position = "none")+
geom_histogram(aes(y=..density..),
binwidth = .2,
colour="black",
fill="gray90") +
labs(x = "Studentized Residual", y = "Density") +
stat_function(fun = dnorm,
args = list(mean = mean(mlrdata$studentized.residuals, na.rm = TRUE),
sd = sd(mlrdata$studentized.residuals, na.rm = TRUE)),
colour = "red", size = 1) +
theme_bw(base_size = 8)
# plot 6
p6 <- ggplot(mlrdata, aes(fitted, studentized.residuals)) +
geom_point() +
geom_smooth(method = "lm", colour = "Red")+
theme_bw(base_size = 8)+
labs(x = "Fitted Values",
y = "Studentized Residual")
# plot 7
p7 <- qplot(sample = mlrdata$studentized.residuals, stat="qq") +
theme_bw(base_size = 8) +
labs(x = "Theoretical Values",
y = "Observed Values")
# 1: optimal = 0
# (listed data points should be removed)
which(mlrdata$standardized.residuals > 3.29)
# 2: optimal = 1
# (listed data points should be removed)
stdres_258 <- as.vector(sapply(mlrdata$standardized.residuals, function(x) {
ifelse(sqrt((x^2)) > 2.58, 1, 0) } ))
(sum(stdres_258) / length(stdres_258)) * 100
# 3: optimal = 5
# (listed data points should be removed)
stdres_196 <- as.vector(sapply(mlrdata$standardized.residuals, function(x) {
ifelse(sqrt((x^2)) > 1.96, 1, 0) } ))
(sum(stdres_196) / length(stdres_196)) * 100
# 4: optimal = 0
# (listed data points should be removed)
which(mlrdata$cooks.distance > 1)
# 5: optimal = 0
# (data points should be removed if cooks distance is close to 1)
which(mlrdata$leverage >= (3*mean(mlrdata$leverage)))
# 6: checking autocorrelation:
# Durbin-Watson test (optimal: high p-value)
dwt(m2.mlr)
# 7: test multicollinearity 1
vif(m2.mlr)
# 8: test multicollinearity 2
1/vif(m2.mlr)
# 9: mean vif should not exceed 1
mean(vif(m2.mlr))
# load functions
source("https://slcladal.github.io/rscripts/SampleSizeMLR.r")
source("https://slcladal.github.io/rscripts/ExpR.r")
# check if sample size is sufficient
smplesz(m2.mlr)
# check beta-error likelihood
expR(m2.mlr)
# tabulate model results
sjPlot::tab_model(m0.glm, m2.glm)
sjPlot::tab_model(m2.glm)
summary(m2.mlr)
report::report(m2.mlr)
round(plogis(-10:10), 5)
round(plogis(-10:10), 5)
round(plogis(-10:10), 1)
round(plogis(-10:10), 10)
round(plogis(-10:10), 5)
round(plogis(-100:100), 5)
round(plogis(-10:10), 5)
plogis(-10:10) %>%
as.data.frame() %>%
dplyr::mutate(id = 1:n()) %>%
dplyr::rename(values = 1) %>%
ggplot(aes(y = values, x = id)) +
geom_line(color = "gray50", size = 1) +
geom_point(color = "red", size = 2)+
labs(x = "", y = "") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# set seed
set.seed(12345)
# generates 20 values, with mean of 30 & s.d.=2
bodyheight=rnorm(20,175,20)
# sorts these values in ascending order
bodyheight=sort(bodyheight)
# assign 'survival' to these 20 individuals non-randomly
# most mortality occurs at smaller body size
relationship=c(0,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1)
# saves data frame with two columns: body size, survival
blrdata=as.data.frame(cbind(bodyheight,relationship))
# generate models
lm1 <- lm(relationship ~ bodyheight, data = blrdata)
blr1 <- glm(relationship ~ bodyheight, family = binomial, data = blrdata)
blrdata <- blrdata %>%
dplyr::mutate(Pred_lm = predict(lm1, blrdata),
Pred_blm = predict(blr1, blrdata)) %>%
dplyr::mutate(Prob_lm = plogis(predict(lm1, blrdata)),
Prob_blm = plogis(predict(blr1, blrdata)),
Pred_blm2 = ifelse(predict(blr1, blrdata, type = "response") >= .5, 1, 0))
# plot
p1 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_abline(intercept = coef(lm1)[1], slope = coef(lm1)[2], color = "red", size = .5) +
geom_point(aes(x = bodyheight, y = Pred_lm), color = "blue") +
theme_bw(base_size = 8)+
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Predictions and \nregression line of lm.", x = "Height", y = "")
p2 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_abline(intercept = coef(blr1)[1], slope = coef(blr1)[2], color = "red", size = .5) +
geom_point(aes(x = bodyheight, y = Pred_blm), color = "blue") +
theme_bw(base_size = 8)+
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Predictions and \nregression line of blm.", x = "Height", y = "")
p3 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_point(aes(x = bodyheight, y = Prob_blm), color = "blue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "red", size = .5) +
geom_segment(aes(xend = bodyheight, yend = Prob_blm), color = "red", alpha = .2) +
theme_bw(base_size = 8) +
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Logged Probabilities and \nlogged regression line of blm.", x = "Height", y = "")
# show plot
ggpubr::ggarrange(p1, p2, p3, nrow = 1)
View(blrdata)
summary(lm1)
summary(blr1)
temp <- glm(relationship ~ bodyheight, family = gaussian(), data = blrdata)
sjPlot::tab_model(temp, lm1)
sjPlot::tab_model(temp, lm1, blr1)
?sjPlot::tab_model
sjPlot::tab_model(temp, lm1, blr1, show.stat = TRUE)
sjPlot::tab_model(temp, lm1, blr1, show.fstat = TRUE)
p3 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_point(aes(x = bodyheight, y = Prob_blm), color = "blue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "red", size = 5) +
geom_segment(aes(xend = bodyheight, yend = Prob_blm), color = "red", alpha = .2) +
theme_bw(base_size = 8) +
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Logged Probabilities and \nlogged regression line of blm.", x = "Height", y = "")
# show plot
ggpubr::ggarrange(p1, p2, p3, nrow = 1)
p3 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_point(aes(x = bodyheight, y = Prob_blm), color = "blue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = FALSE, color = "red", size = .5) +
geom_segment(aes(xend = bodyheight, yend = Prob_blm), color = "red", alpha = .2) +
theme_bw(base_size = 8) +
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Logged Probabilities and \nlogged regression line of blm.", x = "Height", y = "")
# show plot
ggpubr::ggarrange(p1, p2, p3, nrow = 1)
p3 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_point(aes(x = bodyheight, y = Prob_blm), color = "blue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = TRUE, color = "red", size = .5) +
geom_segment(aes(xend = bodyheight, yend = Prob_blm), color = "red", alpha = .2) +
theme_bw(base_size = 8) +
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Logged Probabilities and \nlogged regression line of blm.", x = "Height", y = "")
# show plot
ggpubr::ggarrange(p1, p2, p3, nrow = 1)
p3 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_point(aes(x = bodyheight, y = Prob_blm), color = "blue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = TRUE, color = "red", size = .5) +
geom_segment(aes(xend = bodyheight, yend = Prob_blm), color = "red", alpha = .2) +
theme_bw(base_size = 80) +
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Logged Probabilities and \nlogged regression line of blm.", x = "Height", y = "")
# show plot
ggpubr::ggarrange(p1, p2, p3, nrow = 1)
p3 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_point(aes(x = bodyheight, y = Prob_blm), color = "blue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = TRUE, color = "red", size = .5) +
geom_segment(aes(xend = bodyheight, yend = Prob_blm), color = "red", alpha = .2) +
theme_bw(base_size = 20) +
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Logged Probabilities and \nlogged regression line of blm.", x = "Height", y = "")
# show plot
ggpubr::ggarrange(p1, p2, p3, nrow = 1)
p3 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_point(aes(x = bodyheight, y = Prob_blm), color = "blue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = TRUE, color = "red", size = .5) +
geom_segment(aes(xend = bodyheight, yend = Prob_blm), color = "red", alpha = .2) +
theme_bw(base_size = 2) +
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Logged Probabilities and \nlogged regression line of blm.", x = "Height", y = "")
# show plot
ggpubr::ggarrange(p1, p2, p3, nrow = 1)
p3 <- ggplot(blrdata, aes(x = bodyheight, y =  relationship)) +
geom_point() +
geom_point(aes(x = bodyheight, y = Prob_blm), color = "blue") +
geom_smooth(method = "glm", method.args = list(family = "binomial"),
se = TRUE, color = "red", size = .5) +
geom_segment(aes(xend = bodyheight, yend = Prob_blm), color = "red", alpha = .2) +
theme_bw(base_size = 8) +
coord_cartesian(ylim = c(-0.2, 1.2), xlim = c(125, 225)) +
scale_y_continuous(breaks=seq(0, 1, 1), labels = c("Single", "Relationship")) +
guides(fill = FALSE) +
labs(title = "Logged Probabilities and \nlogged regression line of blm.", x = "Height", y = "")
# show plot
ggpubr::ggarrange(p1, p2, p3, nrow = 1)
